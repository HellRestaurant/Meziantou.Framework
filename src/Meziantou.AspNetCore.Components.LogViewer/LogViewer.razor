@using System.Globalization
@if (Entries != null)
{
	<div class="log-viewer">
		@foreach (var (entry, index) in Entries.WithIndex())
		{
			<div class="log-entry @(IsSelected(entry) ? "selected" : "")">
				@if (ShowLineNumbers)
				{
					<a class="log-linenumber" @onclick="(e) => SelectLine(entry, e.CtrlKey)" @onclick:preventDefault="true">@(index + 1)</a>
				}

				@if (ShowTimestamps)
				{
					<span class="log-timestamp">@entry.Timestamp.ToString("R")</span>
				}

				<span>
					@if (entry.Data != null)
					{
						<span class="log-toggle-details @(IsOpened(entry) ? "opened" : "")" @onclick="() => ToggleDetails(entry)">▶</span>
					}

					<span class="log-message log-@GetLogLevelClassName(entry.LogLevel)">@LogHighlighter.Highlight(entry.Message, LogHighlighters, "mez-logviewer")</span>
				</span>
			</div>
			@if (IsOpened(entry))
			{
				<div class="log-details">
					<LogEntryDetails Data="entry.Data" />
				</div>
			}
		}
	</div>
}

@code {
	private HashSet<LogEntry> _openedEntries = new HashSet<LogEntry>();
	private HashSet<LogEntry> _selectedEntries = new HashSet<LogEntry>();

	[Parameter]
	public IEnumerable<LogEntry>? Entries { get; set; }

	[Parameter]
	public bool ShowTimestamps { get; set; } = true;

	[Parameter]
	public bool ShowLineNumbers { get; set; } = true;

	[Parameter]
	public IEnumerable<ILogHighlighter> LogHighlighters { get; set; } = new[] { new UrlLogHighlighter() };
	
	private void SelectLine(LogEntry entry, bool append)
	{
		if (!append)
		{
			_selectedEntries.Clear();
		}

		_selectedEntries.Add(entry);
	}

	private void ToggleDetails(LogEntry entry)
	{
		if (!_openedEntries.Remove(entry))
		{
			_openedEntries.Add(entry);
		}
	}

	private bool IsSelected(LogEntry logEntry) => _selectedEntries.Contains(logEntry);
	private bool IsOpened(LogEntry logEntry) => _openedEntries.Contains(logEntry);

	private static string GetLogLevelClassName(LogLevel logLevel)
	{
		return logLevel switch
		{
			LogLevel.Trace => "trace",
			LogLevel.Debug => "debug",
			LogLevel.Information => "information",
			LogLevel.Warning => "warning",
			LogLevel.Error => "error",
			LogLevel.Critical => "critical",
			_ => "information",
		};
	}
}